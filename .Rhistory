setwd("~/Mark/Research/Articles/Survey Program/SurveyProgram")
save.image("~/Mark/Research/Articles/Survey Program/SurveyProgram/Rdata.RData")
#We will create a seed of random positions and at each loop we will
#remove the values that fall within the ellipsis, so that sites never overlap by much they never overlap
temp.x<-runif(nsites*10,0,Area[1])
temp.y<-runif(nsites*10,0,Area[2])
#This function will create a grid and plot sites (as ellipses) in the grid. It is the first part of the Survey program.
FieldMap<-function(Area,site.density,site.area,overlap=0.25,plot=FALSE){
#Variable properties:
##Area: vector with horizontal and vertical size of area surveyed in km.
##SiteDensity: measures as number of sites/km2 can be either one value or a vector with 2 values (min and max) to create a range of densities.
##site.area: it will be one of two options:
#1. one value indicating the are of all sites, in meter^2
#2. a vector with 4 values: min, max, mean (or median), and standard deviation in meter^2.
#Or one single value for uniform sites.
##overlap: maximum overlap of site area, ranging from 0 as no overlap to 1 as complete overlap.
##Plot: if the area should be plotted.
#OBS: Sites will all be ellipses with radii not too different and random angles.
#1. First we create the data.frame that will store the information for all sites.
if(length(site.density)>1){
nsites=ceiling(sample(site.density[1]:site.density[2],1)*Area[1]*Area[2])
}else{
nsites<-ceiling(site.density*Area[1]*Area[2])
}
#this will bring the site area to km2
site.area<-site.area/1e6
site.frame<-matrix(0,nsites,8)
colnames(site.frame)=c("Site","Area","Eccentricity","Angle","center.x","center.y","ellipse.a","ellipse.b")
#We will create a seed of random positions and at each loop we will
#remove the values that fall within the ellipsis, so that sites never overlap by much they never overlap
temp.x<-runif(nsites*10,0,Area[1])
temp.y<-runif(nsites*10,0,Area[2])
#2.We fill the data.frame
for(a in 1:nsites){
site.frame[a,1]<-a
if(length(site.area)>1){
site.frame[a,2]<-rnorm(1,site.area[3],site.area[4])
}else{
site.frame[a,2]<-site.area
}
site.frame[a,3]<-runif(1,0,0.85)
site.frame[a,4]<-runif(1,0,pi)
#x<<-temp.x
#y<<-temp.y
site.frame[a,5]<-temp.x[1]
site.frame[a,6]<-temp.y[1]
#Here is were we remove from the seed vector all points within the ellipsis defined in the loop.
site.frame[a,7]<-(site.frame[a,2]/(pi*(1-site.frame[a,3]^2)^0.5))^0.5
site.frame[a,8]<-((site.frame[a,2]*(1-site.frame[a,3]^2)^0.5)/pi)^0.5
#this is the ellipse function from Cara.
ellipse.function<-function(x) ((x[1]-site.frame[a,5])*cos(site.frame[a,4])+(x[2]-site.frame[a,6])*sin(site.frame[a,4]))^2/site.frame[a,7]^2+
((x[1]-site.frame[a,5])*sin(site.frame[a,4])-(x[2]-site.frame[a,6])*cos(site.frame[a,4]))^2/site.frame[a,8]^2<=1
toBeRemoved<-apply(rbind(temp.x,temp.y), 2, ellipse.function)
temp.x<-temp.x[which(toBeRemoved==FALSE)]
temp.y<-temp.y[which(toBeRemoved==FALSE)]
#this is just an error to check how often we would run out of random seeds, since I'm using N*10...
if(length(temp.x)==0){
stop(paste("ERROR! Routine ran out of random seeds after ", a,"/",nsites," loops!"))
}
}
#Here we plot, if plot = TRUE
if(plot==TRUE){
plot.new()
plot.window(c(0,Area[1]),c(0,Area[2]))
axis(1)
axis(2)
box()
for(a in 1:nsites){
text(site.frame[a,5],site.frame[a,6],site.frame[a,1],pos=3,cex=0.5)
points(site.frame[a,5],site.frame[a,6],pch=16)
#1.Get the angles, x and y to plot the ellypses
angles<-seq(0,2*pi,length=72)
#x= h + a cos(t)*cos(c)-b*sin(t)*sin(c)
xcoords<- site.frame[a,5]+site.frame[a,7]*cos(angles)*cos(site.frame[a,4])-site.frame[a,8]*sin(angles)*sin(site.frame[a,4])
#y= k + b sin(t)*cos(c)+a*cos(t)*sin(c)
ycoords<- site.frame[a,6]+site.frame[a,8]*sin(angles)*cos(site.frame[a,4])+site.frame[a,7]*cos(angles)*sin(site.frame[a,4])
polygon(xcoords,ycoords,col=rgb(0,0,1,0.5),border=NA)
}
}
return(site.frame)
}
FieldMap(Area,Density,SiteArea,plot=TRUE)
FieldMap(Area,Density,SiteArea,plot=TRUE)
FieldMap(Area,Density,SiteArea,plot=TRUE)
FieldMap(Area,10,C(100,2000,666,700),plot=TRUE)
12^0.5
FieldMap(C(3.46,3,46),10,C(100,2000,666,700),plot=TRUE)
RealArea<-c(3.46,3.46)
RealDensity<-5
RealSiteInfo<-C(100,2000,666,700)
RealSiteInfo<-c(100,2000,666,700)
FieldMap(RealArea,RealDensity,RealSiteInfo,overlap = 0,plot=TRUE)
FieldMap(c(1,1),RealDensity,RealSiteInfo,overlap = 0,plot=TRUE)
FieldMap(c(1,1),RealDensity,RealSiteInfo,overlap = 0,plot=TRUE)
FieldMap(c(1,1),RealDensity,RealSiteInfo,overlap = 0,plot=TRUE)
save.image("~/Mark/Research/Articles/Survey Program/SurveyProgram/Rdata.RData")
#This function will plot the results of the SurveyGrid Simulations using Kernel Density Plots.
#All the girds that want to be compared should be grouped into 1 list (list(a,b,c,etc...))
#The plot function allow you to chose from different parts of SurveySummaries youo want to plot.
#plotting options are: sites.found, sites.missed, survey.hits, survey.missed
PlotSurveySumm<-function(SummaryList,plot="sites.found"){
#1.Define the variable to be plotted
if(plot=="sites.found"){
targetcol=5
}
if(plot=="sites.missed"){
targetcol=5
}
if(plot=="survey.hits"){
targetcol=6
}
if(plot=="survey.missed"){
targetcol=6
}
densities<-list()
maxy<-rep(0,length(SummaryList))
#2.Create the density curves
for(a in 1:length(Summarylist)){
if(plot=="sites.found" || plot=="survey.hit"){
densities[[a]]<-density(SummaryList[,targetcol])}
if(plot=="sites.missed" || plot=="survey.missed"){
densities[[a]]<-density(1-SummaryList[,targetcol])}
maxy[a]<-max(densities[[a]]$y)
}
#3.Create the plot
plot.new()
plot.window(c(0,1),c(0,max(maxy)))
axis(1, at=seq(0,1,by=0.1))
axis(2)
ColorLine<-rainbow(length(SummaryList),alpha=0.7)
ColorSolid<-rainbow(length(SummaryList),alpha=0.4)
for(a in 1:length(SummaryList)){
polygon(densities[[a]],col=ColorSolid[a])
lines(densities[[a]],col=ColorSolid[a])
}
}
PlotSurveySumm(list(Hex35,Square35))
#This function will plot the results of the SurveyGrid Simulations using Kernel Density Plots.
#All the girds that want to be compared should be grouped into 1 list (list(a,b,c,etc...))
#The plot function allow you to chose from different parts of SurveySummaries youo want to plot.
#plotting options are: sites.found, sites.missed, survey.hits, survey.missed
PlotSurveySumm<-function(SummaryList,plot="sites.found"){
#1.Define the variable to be plotted
if(plot=="sites.found"){
targetcol=5
}
if(plot=="sites.missed"){
targetcol=5
}
if(plot=="survey.hits"){
targetcol=6
}
if(plot=="survey.missed"){
targetcol=6
}
densities<-list()
maxy<-rep(0,length(SummaryList))
#2.Create the density curves
for(a in 1:length(SummaryList)){
if(plot=="sites.found" || plot=="survey.hit"){
densities[[a]]<-density(SummaryList[,targetcol])}
if(plot=="sites.missed" || plot=="survey.missed"){
densities[[a]]<-density(1-SummaryList[,targetcol])}
maxy[a]<-max(densities[[a]]$y)
}
#3.Create the plot
plot.new()
plot.window(c(0,1),c(0,max(maxy)))
axis(1, at=seq(0,1,by=0.1))
axis(2)
ColorLine<-rainbow(length(SummaryList),alpha=0.7)
ColorSolid<-rainbow(length(SummaryList),alpha=0.4)
for(a in 1:length(SummaryList)){
polygon(densities[[a]],col=ColorSolid[a])
lines(densities[[a]],col=ColorSolid[a])
}
}
PlotSurveySumm(list(Hex35,Square35))
#This function will plot the results of the SurveyGrid Simulations using Kernel Density Plots.
#All the girds that want to be compared should be grouped into 1 list (list(a,b,c,etc...))
#The plot function allow you to chose from different parts of SurveySummaries youo want to plot.
#plotting options are: sites.found, sites.missed, survey.hits, survey.missed
PlotSurveySumm<-function(SummaryList,plot="sites.found"){
#1.Define the variable to be plotted
if(plot=="sites.found"){
targetcol=5
}
if(plot=="sites.missed"){
targetcol=5
}
if(plot=="survey.hits"){
targetcol=6
}
if(plot=="survey.missed"){
targetcol=6
}
densities<-list()
maxy<-rep(0,length(SummaryList))
#2.Create the density curves
for(a in 1:length(SummaryList)){
if(plot=="sites.found" || plot=="survey.hit"){
densities[[a]]<-density(SummaryList[[a]][,targetcol])}
if(plot=="sites.missed" || plot=="survey.missed"){
densities[[a]]<-density(1-SummaryList[[a]][,targetcol])}
maxy[a]<-max(densities[[a]]$y)
}
#3.Create the plot
plot.new()
plot.window(c(0,1),c(0,max(maxy)))
axis(1, at=seq(0,1,by=0.1))
axis(2)
ColorLine<-rainbow(length(SummaryList),alpha=0.7)
ColorSolid<-rainbow(length(SummaryList),alpha=0.4)
for(a in 1:length(SummaryList)){
polygon(densities[[a]],col=ColorSolid[a])
lines(densities[[a]],col=ColorSolid[a])
}
}
PlotSurveySumm(list(Hex35,Square35))
?title
x<-list(Hex35,Square35)
x<-list(Hex35,Square35)
?legend
y<-c("a","b","c")
paste(y,y)
#This function will plot the results of the SurveyGrid Simulations using Kernel Density Plots.
#All the girds that want to be compared should be grouped into 1 list (list(a,b,c,etc...))
#The plot function allow you to chose from different parts of SurveySummaries youo want to plot.
#plotting options are: sites.found, sites.missed, survey.hits, survey.missed
#labels: a vector of strings for the legend, in the same order of the matrices in list
PlotSurveySumm<-function(SummaryList,plot="sites.found",labels){
#1.Define the variable to be plotted
if(plot=="sites.found"){
targetcol=5
MainTitle="Frequency of sites discovered"
}
if(plot=="sites.missed"){
targetcol=5
MainTitle="Frequency of sites missed"
}
if(plot=="survey.hits"){
targetcol=6
MainTitle="Frequency of surveys that located sites"
}
if(plot=="survey.missed"){
targetcol=6
MainTitle="Frequency of negative surveys"
}
densities<-list()
means<-rep(0,length(SummaryList))
stdevs<-rep(0,length(SummaryList))
maxy<-rep(0,length(SummaryList))
#2.Create the density curves and get summary stats
for(a in 1:length(SummaryList)){
if(plot=="sites.found" || plot=="survey.hit"){
densities[[a]]<-density(SummaryList[[a]][,targetcol])
means[a]<-mean(SummaryList[[a]][,targetcol])
stdevs[a]<-sd(SummaryList[[a]][,targetcol])
}
if(plot=="sites.missed" || plot=="survey.missed"){
densities[[a]]<-density(1-SummaryList[[a]][,targetcol])
means[a]<-mean(1-SummaryList[[a]][,targetcol])
stdevs[a]<-sd(1-SummaryList[[a]][,targetcol])
}
maxy[a]<-max(densities[[a]]$y)
}
#3.Create the plot
plot.new()
plot.window(c(0,1),c(0,max(maxy)))
axis(1, at=seq(0,1,by=0.1))
axis(2)
ColorLine<-rainbow(length(SummaryList),alpha=0.7)
ColorSolid<-rainbow(length(SummaryList),alpha=0.4)
for(a in 1:length(SummaryList)){
polygon(densities[[a]],col=ColorSolid[a])
lines(densities[[a]],col=ColorSolid[a])
}
#4.Plot the summary stats and a legend
legend("topright",paste(labels," (",round(means,2),"\u00B1", round(stdevs,2),")"),col=ColorSolid)
#5.Add some titles
title(main=MainTitle)
}
PlotSurveySumm(list(Hex35,Square35))
PlotSurveySumm(list(Hex35,Square35),labels=c("Hex","Square"))
x[[1]]
#This function will plot the results of the SurveyGrid Simulations using Kernel Density Plots.
#All the girds that want to be compared should be grouped into 1 list (list(a,b,c,etc...))
#The plot function allow you to chose from different parts of SurveySummaries youo want to plot.
#plotting options are: sites.found, sites.missed, survey.hits, survey.missed
#labels: a vector of strings for the legend, in the same order of the matrices in list
PlotSurveySumm<-function(SummaryList,plot="sites.found",labels){
#1.Define the variable to be plotted
if(plot=="sites.found"){
targetcol=5
MainTitle="Frequency of sites discovered"
}
if(plot=="sites.missed"){
targetcol=5
MainTitle="Frequency of sites missed"
}
if(plot=="survey.hits"){
targetcol=6
MainTitle="Frequency of surveys that located sites"
}
if(plot=="survey.missed"){
targetcol=6
MainTitle="Frequency of negative surveys"
}
densities<-list()
means<-rep(0,length(SummaryList))
stdevs<-rep(0,length(SummaryList))
maxy<-rep(0,length(SummaryList))
#2.Create the density curves and get summary stats
for(a in 1:length(SummaryList)){
if(plot=="sites.found" || plot=="survey.hit"){
densities[[a]]<-density(SummaryList[[a]][,targetcol])
means[a]<-mean(SummaryList[[a]][,targetcol])
stdevs[a]<-sd(SummaryList[[a]][,targetcol])
}
if(plot=="sites.missed" || plot=="survey.missed"){
densities[[a]]<-density(1-SummaryList[[a]][,targetcol])
means[a]<-mean(1-SummaryList[[a]][,targetcol])
stdevs[a]<-sd(1-SummaryList[[a]][,targetcol])
}
maxy[a]<-max(densities[[a]]$y)
}
#3.Create the plot
plot.new()
plot.window(c(0,1),c(0,max(maxy)))
axis(1, at=seq(0,1,by=0.1))
axis(2)
ColorLine<-rainbow(length(SummaryList),alpha=0.7)
ColorSolid<-rainbow(length(SummaryList),alpha=0.4)
for(a in 1:length(SummaryList)){
polygon(densities[[a]],col=ColorSolid[a])
lines(densities[[a]],col=ColorSolid[a])
}
#4.Plot the summary stats and a legend
legend("topright",paste(labels," (",round(means,2),"\u00B1", round(stdevs,2),")"),fill=ColorSolid)
#5.Add some titles
title(main=MainTitle)
}
PlotSurveySumm(list(Hex35,Square35),labels=c("Hex","Square"))
PlotSurveySumm(list(Hex35,Square35),labels=c("Hex","Square"),plot=sites.missed)
PlotSurveySumm(list(Hex35,Square35),labels=c("Hex","Square"),plot="sites.missed")
Square50<-SurveyGrid(10,"sq",Area=Area,site.density = 50,site.area = SiteArea,plot=TRUE)
Square50<-SurveyGrid(10,"hex",Area=Area,site.density = 50,site.area = SiteArea,plot=TRUE)
Hex50<-Square50
Square50<-SurveyGrid(10,"sq",Area=Area,site.density = 50,site.area = SiteArea,plot=TRUE)
Staggered50<-SurveyGrid(10,"sta",Area=Area,site.density = 50,site.area = SiteArea,plot=TRUE)
PlotSurveySumm(list(Hex50,Square50,Staggered50),plot="sites.found",labels=c("Hex","Square","Stag"))
PlotSurveySumm(list(Hex50,Square50,Staggered50),plot="survey.hits",labels=c("Hex","Square","Stag"))
View(Square35)
View(Square50)
#This function will plot the results of the SurveyGrid Simulations using Kernel Density Plots.
#All the girds that want to be compared should be grouped into 1 list (list(a,b,c,etc...))
#The plot function allow you to chose from different parts of SurveySummaries youo want to plot.
#plotting options are: sites.found, sites.missed, survey.hits, survey.missed
#labels: a vector of strings for the legend, in the same order of the matrices in list
PlotSurveySumm<-function(SummaryList,plot="sites.found",labels){
#1.Define the variable to be plotted
if(plot=="sites.found"){
targetcol=5
MainTitle="Frequency of sites discovered"
}
if(plot=="sites.missed"){
targetcol=5
MainTitle="Frequency of sites missed"
}
if(plot=="survey.hits"){
targetcol=6
MainTitle="Frequency of surveys that located sites"
}
if(plot=="survey.missed"){
targetcol=6
MainTitle="Frequency of negative surveys"
}
densities<-list()
means<-rep(0,length(SummaryList))
stdevs<-rep(0,length(SummaryList))
maxy<-rep(0,length(SummaryList))
#2.Create the density curves and get summary stats
for(a in 1:length(SummaryList)){
if(plot=="sites.found" || plot=="survey.hits"){
densities[[a]]<-density(SummaryList[[a]][,targetcol])
means[a]<-mean(SummaryList[[a]][,targetcol])
stdevs[a]<-sd(SummaryList[[a]][,targetcol])
}
if(plot=="sites.missed" || plot=="survey.missed"){
densities[[a]]<-density(1-SummaryList[[a]][,targetcol])
means[a]<-mean(1-SummaryList[[a]][,targetcol])
stdevs[a]<-sd(1-SummaryList[[a]][,targetcol])
}
maxy[a]<-max(densities[[a]]$y)
}
#3.Create the plot
plot.new()
plot.window(c(0,1),c(0,max(maxy)))
axis(1, at=seq(0,1,by=0.1))
axis(2)
ColorLine<-rainbow(length(SummaryList),alpha=0.7)
ColorSolid<-rainbow(length(SummaryList),alpha=0.4)
for(a in 1:length(SummaryList)){
polygon(densities[[a]],col=ColorSolid[a])
lines(densities[[a]],col=ColorSolid[a])
}
#4.Plot the summary stats and a legend
legend("topright",paste(labels," (",round(means,2),"\u00B1", round(stdevs,2),")"),fill=ColorSolid)
#5.Add some titles
title(main=MainTitle)
}
PlotSurveySumm(list(Hex50,Square50,Staggered50),plot="survey.hits",labels=c("Hex","Square","Stag"))
save.image("~/Mark/Research/Articles/Survey Program/SurveyProgram/Rdata.RData")
View(Square35)
View(Square50)
PlotSurveySumm(list(Hex50,Square50,Staggered50),"sites.missed",c("Hex","Square", "Sta"))
